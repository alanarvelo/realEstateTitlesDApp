// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var proof39 = require('../../zokrates/code/square/proof39.json');

contract('Verifier', accounts => {
    const owner = accounts[0];
    const acc_1 = accounts[1];

    describe('testing verifier works', function () {
        beforeEach(async function () { 
            this.contract = await Verifier.new();
        });

        it('with correct proof', async function () { 
            let valP = await this.contract.verifyTx.call(proof39['proof']['A'], proof39['proof']['A_p'],
            proof39['proof']['B'], proof39['proof']['B_p'],
            proof39['proof']['C'], proof39['proof']['C_p'],
            proof39['proof']['H'], proof39['proof']['K'], proof39['input']);
        assert.equal(true, valP, "verification failed with correct proof")
        });

        it('with incorrect proof', async function () { 
            let invalP = await this.contract.verifyTx.call(proof39['proof']['A'], proof39['proof']['A_p'],
            proof39['proof']['B'], proof39['proof']['B_p'],
            proof39['proof']['C'], proof39['proof']['C_p'],
            proof39['proof']['H'], proof39['proof']['K'], [3,9]);
        assert.equal(false, invalP, "verification failed with correct proof")
        });

    });

})

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

    
// Test verification with incorrect proof
